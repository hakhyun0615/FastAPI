https://drive.google.com/drive/folders/1qcpF6tvhWfgsQzw-Bp_pvyzkq4lUsFsL

# (HTTP Request) -> FastAPI -> (HTTP Response)
uvicorm main:app --reload

[자동 문서화]
Swagger UI
- 테스트 가능 (curl URL도 가능)
ReDoc
- 직관적 UI

----------------------------------------

[HTTP Request 구성]
header: 메타데이터
body: 데이터

[HTTP Request 타입힌트]
import typing과 pydantic 사용 권장
- List[int] = Query([]) # pydantic은 = Query([]) 생략
- Dict[str, int] # dict도 가능
- Optional[str] = None: 문자열 또는 None 
- Union[str, int]: 문자열 또는 정수
- List[Dict[str, Union[str, int]]]
pydantic Field 제약 조건 및 추가 정보
- str = Field(...,): 문자열 필수
- str = Field(None,): 문자열 없어도 가능
- List[str] = Field(default=[],): 디폴트값 설정
- min_length, max_length: 문자열 길이 제한
- gt(e), lt(e): 숫자 제한

[HTTP Request 메소드]
- GET (header)
- POST (body)
- PUT (body)
- DELETE (body)

[HTTP Response 코드]
- 2xx: 성공
- 3xx: 리다이렉션
- 4xx: 실패
- 5xx: 서버 오류

----------------------------------------

[HTTP Response 모델]
reponse_model는 응답 형태 제한
- reponse_model=Item: Item pydantic 구조만 응답
- reponse_model=List[Item]
- reponse_model=Union[Cat, Dog]

[HTTP Response 클래스]
응답의 종류 header에 명시 # 자동이여서 생략 가능
- JSONResponse
- HTMLResponse
- PlainTextResponse

----------------------------------------

[HTTP Exception 클라스]
raise HTTPException(status_code=400, detail=str(e))

----------------------------------------

[템플릿]
HTML(프런트엔드) 특정 부분을 백엔드가 채워주는 것
백엔드: templates = Jinja2Templates(directory="templates", auto_reload=True)
@app.get("/inherit")
def template_inherit(request: Request):
    my_text = "FastAPI와 Jinja2를 이용한 예시입니다."
    return templates.TemplateResponse("index.html", {"request": request, "text": my_text})
프런트엔드: {{ text }}
         {% if text == "morning" %}
            <h1>Good Morning!</h1>
         {% elif text == "afternoon" %}
            <h1>Good Afternoon!</h1>
         {% else %}
            <h1>Good Evening!</h1>
         {% endif %}

----------------------------------------

[데이터베이스 조회·삽입·수정]
- PyMySQL: SQL 사용
- ORM (SQLAlchemy): Python 사용

[SQLAlchemy 비동기 방식]
1. DB 접속
engine = create_async_engine(
    "mysql+aiomysql://funcoding:funcoding@localhost/db_name", 
    echo=True # 로그 출력
)
2. Session 정의
AsyncSessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession
)
3. Session 생성
async def get_db():
    async with AsyncSessionLocal() as session:
        yield session
        await session.commit()
4. Table 생성
@asynccontextmanager
async def app_lifespan(app: FastAPI):
   # 애플리케이션 시작시
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
   # 애플리케이션 종료시
    yield
app = FastAPI(lifespan=app_lifespan)
5. API 엔드포인트 추가
@app.post("/users/")
async def create_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    new_user = User(username=user.username, email=user.email)
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return {
        "id": new_user.id,
        "username": new_user.username,
        "email": new_user.email
    }
@app.get("/users/{user_id}")
async def read_user(user_id: int, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).filter(User.id == user_id))
    db_user = result.scalars().first()
    if db_user is None:
        return {"error": "User not found"}
    return {
        "id": db_user.id,
        "username": db_user.username,
        "email": db_user.email
    }

----------------------------------------

[MVC 모델]
- Model: DB (database.py)
- View: Frontend (templates folder)
- Controller: API (main.py)